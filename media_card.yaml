input_select:
  mp_card_player_friendly_name:
    name: Media Card Friendly Name
    options:
      - Kitchen Speaker
      - Main Bedroom Player
      - Rumpus Amplifier
      - Study Player
      - Abigail Speaker
      - Hannah Speaker
      - Grace Speaker
      - Pixel 4a
      - Tablet

    initial: Kitchen Speaker

  ma_list_of_linkable_players:
    name: "MA Linkable Player List"
    options:
      - Study Player
    initial: Study Player
    
input_boolean:
  mp_card_shuffle_is_on:
    name: Media Card Shuffle Mode Tracking
  menu_visible:
    name: Side Menu is Visible
  media_card_show_discart:
    name: Media Card Show Rotating Disc Art
  media_card_update_imagery:
    name: Media Card Update Imagery
  link_menu_visible:
    name: Link Menu is Visible
  player_is_joined:
    name: Player Is Joined
    
input_text:
  current_playing_title:
    name: Currently Playing Title  
  current_playing_artist:
    name: Currently Playing Artist  
  current_playing_album:
    name: Currently Playing Album  
  current_track_quality:
    name: Current track quality stats
  media_card_source:
    name: Current track source
  next_track:
    name: Next Track to Play
  media_card_url_to_discart_image:
    name: URL to Media Card Disc Art image
    max: 254
  media_card_explicit_language:
    name: Track contains explicit language
  media_card_favourite:
    name: Track is marked as a favourite
  media_card_hi_res_track:
    name: Track is Hi-Res
  media_card_entity_id_to_be_linked:
    name: Entity_id of the selected player for linking
  media_card_selected_player_provider:
    name: The selected players MA provider
    
template:
  - trigger:
    - platform: state
      entity_id: sensor.media_card_player_id
    - platform: state
      entity_id: input_boolean.media_card_show_discart
    - platform: state
      entity_id: input_text.media_card_url_to_discart_image
    - platform: state
      entity_id: sensor.media_card_media_position
    sensor:   
      - name: "URL to image"
        unique_id: mp-card-url-to-image
        state: >
          {% set local_image = "" %}
            {% if (state_attr(states('sensor.media_card_player_id'), 'entity_picture_local') != none) and states('sensor.media_card_player_id').state != 'unavailable' %}
              {% set local_image = state_attr(states('sensor.media_card_player_id'), 'entity_picture_local') %}
            {% elif (state_attr(states('sensor.media_card_player_id'), 'entity_picture') != none) and states('sensor.media_card_player_id').state != 'unavailable' %}
              {% set local_image = state_attr(states('sensor.media_card_player_id'), 'entity_picture') %}
            {% else %}
              {% set local_image = "http://192.168.1.166:8123/local/empty.png"  %}
            {% endif %}
          {% if is_state('input_boolean.media_card_show_discart', 'off') %}
            {{ local_image }}
          {% else %}
            {{ states('input_text.media_card_url_to_discart_image') }}
          {% endif %}

  - trigger:
    - platform: state
      entity_id: input_select.mp_card_player_friendly_name
    sensor:   
      - name: "media card player id"
        unique_id: mp-card-player-id
        state: >
          {{ (expand(states.media_player) 
             | selectattr('name' , 'search', states('input_select.mp_card_player_friendly_name'), ignorecase=true ) 
             | selectattr('attributes.mass_player_type', 'defined') 
             | map(attribute='entity_id') 
             | join) 
          }}
  - sensor:
      - name: "media card selected player state"
        unique_id: selected_player_state
        state: >
          {{ states(states.sensor.media_card_player_id.state) }}
      - name: "media card shuffle mode"
        unique_id: mc_shuffle_mode
        state: >
          {{ state_attr(states.sensor.media_card_player_id.state, 'shuffle') }}
      - name: "media card mute mode"
        unique_id: mc_mute_mode
        state: >
          {{ state_attr(states.sensor.media_card_player_id.state, 'is_volume_muted') }}
      - name: "media card repeat mode"
        unique_id: mc_repeat_mode
        state: >
          {{ state_attr(states.sensor.media_card_player_id.state, 'repeat') }}
      - name: "media card volume level"
        unique_id: mc_volume_level
        state: >
          {{ state_attr(states.sensor.media_card_player_id.state, 'volume_level') }}
      - name: "media card media position"
        unique_id: mc_media_position
        state: >
          {{ state_attr(states.sensor.media_card_player_id.state, 'media_position') }}
      - name: "media card group players"
        unique_id: mc_group_players
        state: >
          {{ state_attr(states.sensor.media_card_player_id.state, 'group_members') }}
      - name: "media_card_now_playing_track_uri"  
        unique_id: mc_now_playing_track_uri
        state: >
          {{ state_attr(states.sensor.media_card_player_id.state, 'media_content_id') }}

          
script:
  get_now_playing_card:
    mode: queued
    alias: "Get Now Playing Media Card Info"
    sequence:
      - delay:
          milliseconds: 250
      - action: music_assistant.get_queue
        continue_on_error: true
        data:
          entity_id:  "{{ states.sensor.media_card_player_id.state }}"
        response_variable: queue_info
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ queue_info[states.sensor.media_card_player_id.state]['items'] | float(0) > 0 }}"
              - condition: template 
                value_template: "{{ queue_info[states.sensor.media_card_player_id.state]['current_item'] is not none }}"
              - condition: template 
                value_template: "{{ queue_info[states.sensor.media_card_player_id.state]['active'] }}"
            sequence:
              - action: input_text.set_value
                continue_on_error: false
                target:
                  entity_id: input_text.current_playing_artist
                data:
                  value: >-
                    {% set stream_title = queue_info[states.sensor.media_card_player_id.state].current_item.stream_title %}
                    {% set artist = queue_info[states.sensor.media_card_player_id.state].current_item.media_item.artists[0].name if queue_info[states.sensor.media_card_player_id.state].current_item.media_item.artists is defined %}
                    
                    {{ stream_title.split('-')[0].strip() if stream_title is defined and stream_title is not none and '-' in stream_title
                     else 
                       artist if artist is defined and artist is not none}}
                    
              - action: input_text.set_value
                continue_on_error: true
                target:
                  entity_id: input_text.current_playing_title
                data:
                  value: >-
                    {% set stream_title = queue_info[states.sensor.media_card_player_id.state].current_item.stream_title %}

                    {{ queue_info[states.sensor.media_card_player_id.state].current_item.stream_title.split('-')[1].strip() if stream_title is defined and stream_title is not none and '-' in stream_title
                     else 
                       queue_info[states.sensor.media_card_player_id.state].current_item.media_item.name }}
                       
              - action: input_text.set_value
                continue_on_error: false
                target:
                  entity_id: input_text.current_playing_album
                data:
                  value: >-
                    {% set stream_title = queue_info[states.sensor.media_card_player_id.state].current_item.stream_title %}
                    {% set album = "null" %}
                    {% if queue_info[states.sensor.media_card_player_id.state].current_item.media_item.album is defined %}
                      {% set album = queue_info[states.sensor.media_card_player_id.state].current_item.media_item.album.name  %}
                    {% endif %}

                    {% if (stream_title is defined and stream_title is not none) or queue_info[states.sensor.media_card_player_id.state].current_item.media_item.media_type == "radio" %}
                        {{ queue_info[states.sensor.media_card_player_id.state].current_item.media_item.name }}
                    {% else %}
                        {% if album != "null" %}
                          {{ queue_info[states.sensor.media_card_player_id.state].current_item.media_item.album.name +" " if album is not none else ""}}
                          {%- if queue_info[states.sensor.media_card_player_id.state].current_item.media_item.album.version | length > 0 -%} 
                              ({{ queue_info[states.sensor.media_card_player_id.state].current_item.media_item.album.version }})
                          {% endif %}
                        {% endif %}
                    {% endif %}
                                          
              - action: input_text.set_value
                continue_on_error: true
                target:
                  entity_id: input_text.current_track_quality
                data:
                  value: >-
                    {% if queue_info[states.sensor.media_card_player_id.state].current_item.stream_details is not none -%}
                      {{ queue_info[states.sensor.media_card_player_id.state].current_item.stream_details.content_type | upper}} â€¢ {{ queue_info[states.sensor.media_card_player_id.state].current_item.stream_details.sample_rate | float(0) / 1000}}khz â€¢ {{ queue_info[states.sensor.media_card_player_id.state].current_item.stream_details.bit_depth}}bit
                    {% endif -%}
                    
              - action: input_text.set_value
                continue_on_error: true
                target:
                  entity_id: input_text.media_card_hi_res_track
                data:
                  value: >-
                    {% if queue_info[states.sensor.media_card_player_id.state].current_item.stream_details is not none -%}
                      {% if (queue_info[states.sensor.media_card_player_id.state].current_item.stream_details.sample_rate | float(0) / 1000) > 48 or
                            (queue_info[states.sensor.media_card_player_id.state].current_item.stream_details.bit_depth | float(0)) > 16 %}
                        true
                      {% else %}
                        false
                      {% endif %}
                    {% endif -%}
                    
              - action: input_text.set_value
                continue_on_error: true
                target:
                  entity_id: input_text.media_card_source
                data:
                  value: >-
                    {% if queue_info[states.sensor.media_card_player_id.state].current_item.stream_details is not none -%}
                      /local/floorplan/images/icon-{{ queue_info[states.sensor.media_card_player_id.state].current_item.stream_details.provider.split('-')[0].strip() }}.svg
                    {% endif -%}
                    
              - action: input_text.set_value
                continue_on_error: true
                target:
                  entity_id: input_text.next_track
                data:
                  value: >-
                    {% if (queue_info[states.sensor.media_card_player_id.state]['items'] | float(0)) - (queue_info[states.sensor.media_card_player_id.state]['current_index'] | float(0)) != 1 %}
                      Next: {{ queue_info[states.sensor.media_card_player_id.state].next_item.name | replace('-','â€¢')}}
                    {% endif %}
                                        
        default:
          - action: input_text.set_value
            target:
              entity_id: input_text.current_playing_artist
            data:
              value: ""
          - action: input_text.set_value
            target:
              entity_id: input_text.current_playing_title
            data:
              value: ""
          - action: input_text.set_value
            target:
              entity_id: input_text.current_playing_album
            data:
              value: ""
          - action: input_text.set_value
            target:
              entity_id: input_text.media_card_hi_res_track
            data:
              value: "false"
          - action: input_text.set_value
            target:
              entity_id: input_text.current_track_quality
            data:
              value: ""
          - action: input_text.set_value
            target:
              entity_id: input_text.media_card_source
            data:
              value: "/local/floorplan/images/off.svg"
          - action: input_text.set_value
            target:
              entity_id: input_text.next_track
            data:
              value: ""
          - action: input_text.set_value
            target:
              entity_id: input_text.media_card_url_to_discart_image
            data:
              value: "http://192.168.1.166:8123/local/empty.png"
          # - action: input_text.set_value
            # target:
              # entity_id: input_text.media_card_playing_album_library_id   
            # data:
              # value: "1"
          - action: input_text.set_value
            target:
              entity_id: input_text.media_card_explicit_language
            data:
              value: "false"
          - action: input_text.set_value
            target:
              entity_id: input_text.media_card_favourite
            data:
              value: "false"

  media_card_set_shuffle_mode:
    mode: queued
    alias: "Media Card Set Shuffle Mode"
    sequence:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ state_attr(states.sensor.media_card_player_id.state, 'shuffle') }}"
            sequence:
              - action: media_player.shuffle_set
                data:
                  entity_id: "{{ states.sensor.media_card_player_id.state }}"
                  shuffle: false
        default:
          - action: media_player.shuffle_set
            data:
              entity_id: "{{ states.sensor.media_card_player_id.state }}"
              shuffle: true 

  media_card_toggle_power:
    mode: queued
    alias: "Media Card Toggle Player Power"
    sequence:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ states[states.sensor.media_card_player_id.state].state == 'off' }}"
            sequence:
              - action: media_player.turn_on
                data:
                  entity_id: "{{ states.sensor.media_card_player_id.state }}"
        default:
          - action: media_player.turn_off
            data:
              entity_id: "{{ states.sensor.media_card_player_id.state }}"

  set_repeat_mode:
    mode: queued
    alias: "Media Card Set Repeat Mode"
    sequence:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ state_attr(states.sensor.media_card_player_id.state, 'repeat') == 'off' }}"
            sequence:
              - action: media_player.repeat_set
                data:
                  entity_id: "{{ states.sensor.media_card_player_id.state }}"
                  repeat: one
          - conditions:
              - condition: template
                value_template: "{{ state_attr(states.sensor.media_card_player_id.state, 'repeat') == 'one' }}"
            sequence:
              - action: media_player.repeat_set
                data:
                  entity_id: "{{ states.sensor.media_card_player_id.state }}"
                  repeat: all
        default:
          - action: media_player.repeat_set
            data:
              entity_id: "{{ states.sensor.media_card_player_id.state }}"
              repeat: 'off'

           
  media_card_join_unjoin:
    sequence:
      - if:
          - condition: template
            value_template: '{{ states.input_text.media_card_entity_id_to_be_linked.state | length > 13 and states.input_text.media_card_entity_id_to_be_linked.state in states.sensor.media_card_group_players.state }}'
        then: 
          - service: "media_player.unjoin"
            target:
              entity_id: "{{ states.input_text.media_card_entity_id_to_be_linked.state }}"
        else:
          - service: "media_player.join"
            target:
              entity_id: "{{ states.sensor.media_card_player_id.state }}"
            data:
              group_members: "{{ states.input_text.media_card_entity_id_to_be_linked.state }}" 
              
  media_card_skip_unavailable_player:
    sequence:
      - if:
          - condition: template
            value_template: '{{ states(states("sensor.media_card_player_id")) in ["unavailable","unknown"] }}'
        then:
          - service: "input_select.select_next"
            target:
              entity_id: input_select.mp_card_player_friendly_name

  media_card_toggle_favourite:
    sequence:
      - if:
          - condition: state
            entity_id: input_text.media_card_favourite
            state: "true"
        then:
          - service: "input_text.set_value"
            target:
              entity_id: input_text.media_card_favourite
            data:
              value: "false"
          - action: rest_command.ma_remove_favourite
        else:
          - service: "input_text.set_value"
            target:
              entity_id: input_text.media_card_favourite
            data:
              value: "true"
          - action: rest_command.ma_add_favourite

             
automation:
  - alias: Update Now Playing Info
    id: update_now_playing_info
    trigger:
      - platform: state
        entity_id: sensor.media_card_media_position
      - platform: state
        entity_id: sensor.media_card_player_id
    action:
      - service: script.turn_on
        target:
          entity_id: script.get_now_playing_card

  - alias: Update Disc Image and Favorite Status
    id: update_discart_favourite_info
    trigger:
      - platform: state
        entity_id: input_text.current_playing_title
    conditions:
      - condition: template
        value_template: "{{ states.sensor.media_card_now_playing_track_uri.state != 'unknown' }}"
    action:
      - service: rest_command.ma_get_other_item_details
        response_variable: album_info
      - service: input_text.set_value
        target:
          entity_id: input_text.media_card_url_to_discart_image
        data:
          value: >-
            {% if album_info.content.metadata.images is not none and album_info.content.metadata.images is defined -%}
              {% set images = album_info.content.metadata.images -%}
              {% set discart_images = images | selectattr('type', 'equalto', 'discart') | map(attribute='path') | list | first | replace(" ","%20") -%}
              {% set provider = images | selectattr('type', 'equalto', 'discart') | map(attribute='provider') | list | first -%}

              {% if not discart_images %}
                {% if album_info.content.album.metadata.images is not none and album_info.content.album.metadata.images is defined -%}
                  {% set images = album_info.content.album.metadata.images -%}
                  {% set discart_images = images | selectattr('type', 'equalto', 'discart') | map(attribute='path') | list | first | replace(" ","%20") -%}
                  {% set provider = images | selectattr('type', 'equalto', 'discart') | map(attribute='provider') | list | first -%}
                {% endif %}
              {% endif %}
              
              {% if discart_images -%}
                /imageproxy?path={{ discart_images | replace("&","%2526") }}&provider={{ provider }}&size=0
              {% else %}
                http://192.168.1.166:8123/local/cd.png
              {% endif -%}
            {% else %}
              http://192.168.1.166:8123/local/cd.png
            {% endif %}
      - action: input_text.set_value
        continue_on_error: true
        target:
          entity_id: input_text.media_card_favourite
        data:
          value: >
            {% if album_info.content.favorite is not none and album_info.content.favorite is defined -%}
              {{ album_info.content.favorite | lower }}
            {% endif %}
      - action: input_text.set_value
        continue_on_error: true
        target:
          entity_id: input_text.media_card_explicit_language
        data:
          value: >
            {% if album_info.content.metadata.explicit is not none and album_info.content.metadata.explicit is defined -%}
              {{ album_info.content.metadata.explicit | lower }}
            {% endif %}            
            
  - alias: Skip Unavailable Player
    id: skip_unavailable_player
    trigger:
      - platform: state
        entity_id: input_select.mp_card_player_friendly_name
    action:
      - service: script.turn_on
        target:
          entity_id: script.media_card_skip_unavailable_player

  - alias: Update Shuffle Mode Status
    id: update_shuffle_mode_status
    trigger:
      - platform: state
        entity_id: sensor.media_card_player_id
      - platform: state
        entity_id: sensor.media_card_shuffle_mode
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ state_attr(states.sensor.media_card_player_id.state, 'shuffle') }}"
            sequence:
              - action: input_boolean.turn_on
                target:
                  entity_id: input_boolean.mp_card_shuffle_is_on    
        default:
          - action: input_boolean.turn_off
            target:
              entity_id: input_boolean.mp_card_shuffle_is_on  

  - alias: Update Imagery on Floorplan
    id: update_imagery
    trigger:
      - platform: state
        entity_id: sensor.url_to_image
      - platform: state
        entity_id: sensor.media_card_selected_player_state
    action:
      - service: input_boolean.toggle
        target:
          entity_id: input_boolean.media_card_update_imagery

  - id: set_ma_player_entity_id
    alias: Set the MA Player to be Linked Entity Id
    trigger:
      platform: state
      entity_id: input_select.ma_list_of_linkable_players
    action: 
      service: input_text.set_value
      continue_on_error: true
      target:
        entity_id: input_text.media_card_entity_id_to_be_linked
      data:
        value: >-
          {% for entity in states.media_player | selectattr('attributes.mass_player_type', 'defined') %}
            {% if entity.attributes.friendly_name == states.input_select.ma_list_of_linkable_players.state %}
              {{ entity.entity_id }}
            {% endif %}
          {% endfor %}

  - id: set_linked_player_status
    alias: Set Linkable Player Grouped Status
    trigger:
      - platform: state
        entity_id: sensor.media_card_group_players
      - platform: state
        entity_id: input_text.media_card_entity_id_to_be_linked
    action:
      - if:
          - condition: template
            value_template: '{{ states.input_text.media_card_entity_id_to_be_linked.state | length > 13 and states.input_text.media_card_entity_id_to_be_linked.state in states.sensor.media_card_group_players.state }}'
        then: 
          - service: input_boolean.turn_on
            target:
              entity_id: input_boolean.player_is_joined
        else:
          - service: input_boolean.turn_off
            target:
              entity_id: input_boolean.player_is_joined

  - alias: Update Variable for the Selected Player Provider and list of linkable players
    id: update_selected_player_provider
    trigger:
      - platform: state
        entity_id: sensor.media_card_player_id
    action:
      - service: input_text.set_value
        target:
          entity_id: input_text.media_card_selected_player_provider
        data:
          value: >-
            {% set entity_id = states('sensor.media_card_player_id')  %}
            
            {% if '_prov' in entity_id and entity_id.split('_')[-1]|length == 6 %}
              {{ entity_id.split('_')[-1] }}
            {% else %}
              all
            {% endif %}
      - service: input_select.set_options
        target:
          entity_id: input_select.ma_list_of_linkable_players
        data:
          options: |
            {%- set exclude_entity_id = states('sensor.media_card_player_id') -%}
            {%- set player_provider = states('input_text.media_card_selected_player_provider') -%}
            {%- if player_provider in ["provap","provbs","provsp","provsc","provsn"] -%}
              {%- set media_players = 
                  ( states.media_player 
                  | select('search', 'ma_') 
                  | rejectattr('entity_id', 'eq', exclude_entity_id) 
                  | selectattr('entity_id', 'contains', player_provider)                
                  | map(attribute='attributes.friendly_name') 
                  | list)
              -%} 
            {% elif player_provider in ["provug"] %}
              {%- set media_players = 
                  ( states.media_player 
                  | select('search', 'ma_')
                  | rejectattr('entity_id', 'eq', exclude_entity_id)                
                  | map(attribute='attributes.friendly_name') 
                  | list)
              -%}
            {% else %}
              {% set media_players = ["No Matching Players"] %}
            {% endif %}
            {%- if media_players | length == 0 -%}
              {%- set media_players = ['No Matching Players'] -%}
            {%- endif -%}
            {{ media_players }}
  - alias: Populate List of Available Players
    id: populate_list_of_available_players
    trigger:
      - platform: time
        at: "15:32:00"
    action:
      - service: input_select.set_options
        target:
          entity_id: input_select.mp_card_player_friendly_name
        data:
          options: |
            {% set available_entities = integration_entities('mass') | select('is_state', ['off','playing','idle','paused'])  | list %}
            [{%- for entity_id in available_entities -%}
              {{- state_attr(entity_id, 'friendly_name') -}}{%- if not loop.last -%}, {%- endif -%}
            {%- endfor -%}]
          
rest_command:
  ma_add_favourite:
    url: http://localhost:8095/api
    method: POST
    headers:
      accept: "application/json, text/html"
    payload: >
      {
        "message_id": "1",
        "command": "music/favorites/add_item",
        "args": {
          "item": "{{ states.sensor.media_card_now_playing_track_uri.state }}"
        }
      }
    content_type:  'application/json; charset=utf-8'
    
  ma_remove_favourite:
    url: http://localhost:8095/api
    method: POST
    headers:
      accept: "application/json, text/html"
    payload: >
      {
        "message_id": "1",
        "command": "music/favorites/remove_item",
        "args": {
          "media_type": "track",
          "library_item_id": "{{ states.sensor.media_card_now_playing_track_uri.state.split("track/")[1] }}"
        }
      }
    content_type:  'application/json; charset=utf-8' 

  ma_refresh_playlist:
    url: http://localhost:8095/api
    method: POST
    headers:
      accept: "application/json, text/html"
    payload: >
      {
        "message_id": "1",
        "command": "music/playlists/playlist_tracks",
        "args": {
          "item_id": "31",
          "provider_instance_id_or_domain": "library",
          "force_refresh": true
        }
      }
    content_type:  'application/json; charset=utf-8'
    
  ma_get_other_item_details:
    url: "http://localhost:8095/api"
    method: POST
    headers:
      accept: "application/json, text/html"
      content_type: "application/json; charset=utf-8"
    payload: >
      {
        "message_id": "1",
        "command": "music/item_by_uri",
        "args": {
          "uri": "{{ states.sensor.media_card_now_playing_track_uri.state }}"
        }
      }   
